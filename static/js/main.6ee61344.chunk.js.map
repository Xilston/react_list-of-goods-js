{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","App","useState","goods","setGoods","currentSort","setSort","revers","setReverse","SORT_ABC","SORT_LENGTH","SORT_RESET","sortBy","sortType","sort","reverse","a","b","length","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAM,WACjB,MAA0BC,mBAASF,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA+BF,mBAAS,MAAxC,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA6BJ,mBAAS,MAAtC,mBAAOK,EAAP,KAAeC,EAAf,KAEMC,EAAW,MACXC,EAAc,SACdC,EAAa,QAEbC,EAAS,SAACC,GAGd,OAFAP,EAAQO,GAEAA,GACN,KAAKJ,EAEDL,EADEG,EACO,YAAIJ,GAAOW,OAAOC,UAElB,YAAIZ,GAAOW,QAGtB,MACF,KAAKJ,EAEDN,EADEG,EACO,YAAIJ,GAAOW,MAAK,SAACE,EAAGC,GAAJ,OAAUA,EAAEC,OAASF,EAAEE,UAEvC,YAAIf,GAAOW,MAAK,SAACE,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,WAGlD,MACF,KAAKP,EACHP,EAASJ,GACTM,EAAQ,MACRE,EAAW,MACX,MACF,QAAS,MAAO,oBAGlB,OAAO,GAkBT,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMR,EAAOH,IACtBY,KAAK,SACLF,UAAWG,IACT,SAAU,UAAW,CAAE,WAAYjB,IAAgBI,IAJvD,iCAUA,wBACEW,QAAS,kBAAMR,EAAOF,IACtBW,KAAK,SACLF,UAAWG,IACT,SAAU,aAAc,CAAE,WAAYjB,IAAgBK,IAJ1D,4BAUA,wBACEU,QAAS,WAtCXb,GAEAH,EADEC,EACO,YAAIF,GAAOY,UAEXf,GAGXQ,EAAW,QAEXJ,EAAS,YAAID,GAAOY,WACpBP,GAAW,KA6BPa,KAAK,SACLF,UAAWG,IACT,SAAU,aACV,CAAE,YAAaf,IALnB,qBAWCJ,IAAUH,EACT,wBACEoB,QAAS,kBAAOR,EAAOD,IACvBU,KAAK,SACLF,UAAU,4BAHZ,mBAOE,QAIN,6BACGhB,EAAMoB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCtHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6ee61344.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App = () => {\n  const [goods, setGoods] = useState(goodsFromServer);\n  const [currentSort, setSort] = useState(null);\n  const [revers, setReverse] = useState(null);\n\n  const SORT_ABC = 'abc';\n  const SORT_LENGTH = 'length';\n  const SORT_RESET = 'reset';\n\n  const sortBy = (sortType) => {\n    setSort(sortType);\n\n    switch (sortType) {\n      case SORT_ABC:\n        if (revers) {\n          setGoods([...goods].sort().reverse());\n        } else {\n          setGoods([...goods].sort());\n        }\n\n        break;\n      case SORT_LENGTH:\n        if (revers) {\n          setGoods([...goods].sort((a, b) => b.length - a.length));\n        } else {\n          setGoods([...goods].sort((a, b) => a.length - b.length));\n        }\n\n        break;\n      case SORT_RESET:\n        setGoods(goodsFromServer);\n        setSort(null);\n        setReverse(null);\n        break;\n      default: return 'unknown sort type';\n    }\n\n    return true;\n  };\n\n  function reverseArr() {\n    if (revers) {\n      if (currentSort) {\n        setGoods([...goods].reverse());\n      } else {\n        setGoods(goodsFromServer);\n      }\n\n      setReverse(null);\n    } else {\n      setGoods([...goods].reverse());\n      setReverse(true);\n    }\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => sortBy(SORT_ABC)}\n          type=\"button\"\n          className={cn(\n            'button', 'is-info', { 'is-light': currentSort !== SORT_ABC },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => sortBy(SORT_LENGTH)}\n          type=\"button\"\n          className={cn(\n            'button', 'is-success', { 'is-light': currentSort !== SORT_LENGTH },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => reverseArr()}\n          type=\"button\"\n          className={cn(\n            'button', 'is-warning',\n            { 'is-light': !revers },\n          )}\n        >\n          Reverse\n        </button>\n\n        {goods !== goodsFromServer ? (\n          <button\n            onClick={() => (sortBy(SORT_RESET))}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        ) : null\n        }\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}